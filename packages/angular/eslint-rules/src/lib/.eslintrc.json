{
    "root": true,
    "ignorePatterns": [
        "docs/**/*",
        "scripts/",
        "generators/",
        "junit/",
        "coverage-report/",
        "logs",
        "*.log",
        "npm-debug.log*",
        "yarn-debug.log*",
        "yarn-error.log*",
        "node_modules/",
        "*.tsbuildinfo",
        ".npm",
        ".eslintcache",
        ".yarn-integrity",
        ".env",
        ".env.test",
        ".cache/",
        ".yarn",
        ".angular/",
        ".vscode/",
        ".stackblitz/",
        ".husky/",
        ".github/"
    ],
    "plugins": [
        "import",
        "unused-imports",
        "deprecation",
        "@stylistic/ts"
    ],
    "rules": {
        "curly": "error",
        "eqeqeq": "error",
        "no-var": "error",
        "no-irregular-whitespace": [
            "error",
            {
                "skipTemplates": true
            }
        ]
    },
    "overrides": [
        {
            "files": [
                "*.ts"
            ],
            "parserOptions": {
                "project": [
                    "./tsconfig.base.json"
                ],
                "sourceType": "module",
                "createDefaultProgram": true
            },
            "parser": "@typescript-eslint/parser",
            "extends": [
                "plugin:@typescript-eslint/eslint-recommended",
                "plugin:@typescript-eslint/recommended",
                "plugin:@typescript-eslint/stylistic",
                "plugin:@angular-eslint/recommended",
                "plugin:@angular-eslint/template/process-inline-templates",
                "plugin:import/errors",
                "plugin:import/warnings"
            ],
            "plugins": [
                "eslint-plugin-rxjs"
            ],
            "rules": {
                "@angular-eslint/prefer-standalone": 2,
                "@angular-eslint/prefer-on-push-component-change-detection": 1,
                "no-restricted-globals": [
                    "error",
                    "fit",
                    "fdescribe",
                    {
                        "name": "window",
                        "message": "Avoid using the global `window` directly to ensure server-side rendering (SSR) compatibility. Instead, inject `WINDOW` into your class using `private _window = inject(WINDOW);`. Ensure you import `WINDOW` from '@ng-web-apis/common' with `import { WINDOW } from '@ng-web-apis/common';`."
                    },
                    {
                        "name": "document",
                        "message": "Avoid using the global `document` directly to ensure server-side rendering (SSR) compatibility. Instead, inject `DOCUMENT` into your class using `private _document = inject(DOCUMENT);`. Ensure you import `DOCUMENT` from '@angular/common' with `import { DOCUMENT } from '@angular/common';`."
                    },
                    {
                        "name": "navigator",
                        "message": "Avoid using the global `navigator` directly to ensure server-side rendering (SSR) compatibility. Instead, inject `NAVIGATOR` into your class using `private _navigator = inject(NAVIGATOR);`. Ensure you import `NAVIGATOR` from '@ng-web-apis/common' with `import { NAVIGATOR } from '@ng-web-apis/common';`."
                    }
                ],
                "@typescript-eslint/consistent-type-definitions": [
                    "error",
                    "interface"
                ],
                "@typescript-eslint/no-throw-literal": "error",
                "rxjs/no-unsafe-takeuntil": [
                    "error",
                    {
                        "allow": [
                            "count",
                            "defaultIfEmpty",
                            "endWith",
                            "every",
                            "finalize",
                            "finally",
                            "isEmpty",
                            "last",
                            "max",
                            "min",
                            "publish",
                            "publishBehavior",
                            "publishLast",
                            "publishReplay",
                            "reduce",
                            "share",
                            "shareReplay",
                            "skipLast",
                            "takeLast",
                            "throwIfEmpty",
                            "toArray"
                        ]
                    }
                ],
                "@angular-eslint/component-class-suffix": [
                    "error",
                    {
                        "suffixes": [
                            "Page",
                            "Component",
                            "Element",
                            "Layout"
                        ]
                    }
                ],
                "@stylistic/ts/comma-dangle": [
                    "error",
                    "always-multiline"
                ],
                "curly": [
                    "error"
                ],
                "eqeqeq": "error",
                "grouped-accessor-pairs": [
                    "error",
                    "getBeforeSet"
                ],
                "import/no-absolute-path": [
                    "error"
                ],
                "import/no-useless-path-segments": [
                    "error"
                ],
                "deprecation/deprecation": "warn",
                "no-debugger": "warn",
                "@stylistic/ts/padding-line-between-statements": [
                    "error",
                    {
                        "blankLine": "always",
                        "prev": "*",
                        "next": [
                            "for",
                            "while",
                            "export",
                            "if",
                            "return"
                        ]
                    },
                    {
                        "blankLine": "always",
                        "prev": [
                            "for",
                            "while",
                            "export",
                            "if",
                            "return"
                        ],
                        "next": "*"
                    },
                    {
                        "blankLine": "always",
                        "prev": [
                            "const",
                            "let",
                            "var"
                        ],
                        "next": [
                            "multiline-expression"
                        ]
                    },
                    {
                        "blankLine": "always",
                        "prev": [
                            "multiline-expression"
                        ],
                        "next": [
                            "*"
                        ]
                    },
                    {
                        "blankLine": "always",
                        "prev": "export",
                        "next": "*"
                    },
                    {
                        "blankLine": "never",
                        "prev": "export",
                        "next": "export"
                    },
                    {
                        "blankLine": "never",
                        "prev": "case",
                        "next": "case"
                    },
                    {
                        "blankLine": "never",
                        "prev": "const",
                        "next": "const"
                    }
                ],
                "max-len": [
                    "error",
                    {
                        "code": 170,
                        "ignoreUrls": true,
                        "ignorePattern": "^import .*",
                        "ignoreStrings": true,
                        "ignoreTemplateLiterals": true
                    }
                ],
                "max-params": [
                    "off",
                    2
                ],
                "complexity": [
                    "off",
                    {
                        "max": 3
                    }
                ],
                "max-depth": [
                    "error",
                    2
                ],
                "no-extend-native": "error",
                "no-magic-numbers": [
                    "error",
                    {
                        "ignore": [
                            1,
                            0
                        ],
                        "ignoreArrayIndexes": true,
                        "enforceConst": true,
                        "detectObjects": false
                    }
                ],
                "prefer-destructuring": [
                    "error",
                    {
                        "object": true,
                        "array": true
                    }
                ],
                "default-param-last": "error",
                "camelcase": "error",
                "prefer-const": "error",
                "func-style": [
                    "error",
                    "expression"
                ],
                "id-length": [
                    "error",
                    {
                        "min": 3,
                        "exceptions": [
                            "_",
                            "i",
                            "j",
                            "x",
                            "y",
                            "id",
                            "PI",
                            "to"
                        ]
                    }
                ],
                "no-empty-function": "off",
                "no-empty": [
                    "error",
                    {
                        "allowEmptyCatch": false
                    }
                ],
                "no-unused-vars": "off",
                "no-async-promise-executor": "error",
                "no-await-in-loop": "error",
                "no-promise-executor-return": "error",
                "require-atomic-updates": "error",
                "max-nested-callbacks": [
                    "error",
                    2
                ],
                "prefer-promise-reject-errors": [
                    "error",
                    {
                        "allowEmptyReject": true
                    }
                ],
                "handle-callback-err": [
                    "error",
                    "error"
                ],
                "no-sync": [
                    "error",
                    {
                        "allowAtRootLevel": true
                    }
                ],
                "@typescript-eslint/await-thenable": "error",
                "@typescript-eslint/no-floating-promises": "error",
                "@typescript-eslint/no-misused-promises": "error",
                "@typescript-eslint/no-empty-interface": [
                    "warn",
                    {
                        "allowSingleExtends": true
                    }
                ],
                "@typescript-eslint/no-empty-function": [
                    "error",
                    {
                        "allow": [
                            "arrowFunctions",
                            "constructors"
                        ]
                    }
                ],
                "@typescript-eslint/no-explicit-any": "off",
                "@typescript-eslint/no-non-null-assertion": "error",
                "@typescript-eslint/ban-types": [
                    "error",
                    {
                        "types": {
                            "Object": {
                                "message": "Use Record<string, any> instead."
                            },
                            "String": {
                                "message": "Use string instead."
                            },
                            "Number": {
                                "message": "Use number instead."
                            },
                            "Boolean": {
                                "message": "Use boolean instead."
                            },
                            "Function": {
                                "message": "Use specific callable interface instead."
                            }
                        }
                    }
                ],
                "@typescript-eslint/explicit-function-return-type": [
                    "error",
                    {
                        "allowExpressions": true,
                        "allowConciseArrowFunctionExpressionsStartingWithVoid": true
                    }
                ],
                "@typescript-eslint/member-delimiter-style": [
                    "off",
                    {
                        "multiline": {
                            "delimiter": "none",
                            "requireLast": true
                        },
                        "singleline": {
                            "delimiter": "semi",
                            "requireLast": false
                        }
                    }
                ],
                "@typescript-eslint/naming-convention": [
                    "error",
                    {
                        "selector": "objectLiteralProperty",
                        "format": null,
                        "modifiers": [
                            "requiresQuotes"
                        ]
                    },
                    {
                        "selector": "memberLike",
                        "modifiers": [
                            "private"
                        ],
                        "format": [
                            "camelCase"
                        ],
                        "leadingUnderscore": "require",
                        "trailingUnderscore": "forbid"
                    },
                    {
                        "selector": "classMethod",
                        "modifiers": [
                            "private"
                        ],
                        "format": [
                            "camelCase"
                        ],
                        "leadingUnderscore": "require",
                        "trailingUnderscore": "forbid"
                    },
                    {
                        "selector": "memberLike",
                        "modifiers": [
                            "public",
                            "protected"
                        ],
                        "format": [
                            "camelCase"
                        ],
                        "leadingUnderscore": "forbid",
                        "trailingUnderscore": "forbid"
                    },
                    {
                        "selector": "classMethod",
                        "modifiers": [
                            "public",
                            "protected"
                        ],
                        "format": [
                            "camelCase"
                        ],
                        "leadingUnderscore": "forbid",
                        "trailingUnderscore": "forbid"
                    }
                ],
                "@typescript-eslint/no-unused-vars": [
                    "error",
                    {
                        "argsIgnorePattern": "^_",
                        "args": "all"
                    }
                ],
                "@typescript-eslint/no-var-requires": "error",
                "@typescript-eslint/no-inferrable-types": [
                    "off",
                    {
                        "ignoreParameters": false,
                        "ignoreProperties": false
                    }
                ],
                "@typescript-eslint/no-shadow": [
                    "error",
                    {
                        "hoist": "all"
                    }
                ],
                "@typescript-eslint/no-unused-expressions": [
                    "error",
                    {
                        "allowShortCircuit": true,
                        "allowTernary": true
                    }
                ],
                "@typescript-eslint/triple-slash-reference": [
                    "error",
                    {
                        "lib": "always",
                        "path": "always",
                        "types": "prefer-import"
                    }
                ],
                "@angular-eslint/no-input-rename": "warn",
                "@typescript-eslint/explicit-member-accessibility": [
                    "error",
                    {
                        "ignoredMethodNames": [
                            "ngOnInit",
                            "ngOnChanges",
                            "ngAfterViewInit",
                            "ngDoCheck",
                            "ngAfterContentInit",
                            "ngAfterContentChecked",
                            "ngAfterViewChecked",
                            "ngOnDestroy"
                        ],
                        "accessibility": "explicit",
                        "overrides": {
                            "accessors": "explicit",
                            "constructors": "off",
                            "methods": "explicit",
                            "properties": "explicit",
                            "parameterProperties": "explicit"
                        }
                    }
                ],
                "@typescript-eslint/member-ordering": [
                    "error",
                    {
                        "default": [
                            "signature",
                            "call-signature",
                            "private-static-field",
                            "protected-static-field",
                            "public-static-field",
                            "private-instance-field",
                            "protected-instance-field",
                            "public-instance-field",
                            "protected-abstract-field",
                            "public-abstract-field",
                            "private-field",
                            "protected-field",
                            "public-field",
                            "static-field",
                            "instance-field",
                            "abstract-field",
                            "field",
                            "private-constructor",
                            "protected-constructor",
                            "public-constructor",
                            "constructor",
                            [
                                "public-static-get",
                                "public-static-set"
                            ],
                            [
                                "protected-static-get",
                                "protected-static-set"
                            ],
                            [
                                "private-static-get",
                                "private-static-set"
                            ],
                            [
                                "public-get",
                                "public-set"
                            ],
                            [
                                "protected-get",
                                "protected-set"
                            ],
                            [
                                "private-get",
                                "private-set"
                            ],
                            [
                                "get",
                                "set"
                            ],
                            "public-static-method",
                            "protected-static-method",
                            "private-static-method",
                            "public-instance-method",
                            "protected-instance-method",
                            "private-instance-method",
                            "public-abstract-method",
                            "protected-abstract-method",
                            "public-method",
                            "protected-method",
                            "private-method",
                            "static-method",
                            "instance-method",
                            "abstract-method",
                            "method"
                        ]
                    }
                ],
                "no-multiple-empty-lines": [
                    "error",
                    {
                        "max": 1
                    }
                ],
                "@stylistic/ts/lines-between-class-members": [
                    "error",
                    "always",
                    {
                        "exceptAfterOverload": false,
                        "exceptAfterSingleLine": true
                    }
                ],
                "import/order": [
                    "error",
                    {
                        "alphabetize": {
                            "order": "asc",
                            "caseInsensitive": false
                        },
                        "newlines-between": "always",
                        "groups": [
                            "external",
                            "builtin",
                            "internal",
                            [
                                "parent",
                                "sibling",
                                "index"
                            ]
                        ],
                        "pathGroupsExcludedImportTypes": []
                    }
                ],
                "no-irregular-whitespace": [
                    "error",
                    {
                        "skipTemplates": true
                    }
                ],
                "sort-imports": [
                    "error",
                    {
                        "ignoreCase": true,
                        "ignoreDeclarationSort": true
                    }
                ],
                "unused-imports/no-unused-imports-ts": "error",
                "import/first": "error",
                "import/no-deprecated": "off",
                "import/newline-after-import": "error",
                "import/named": "error",
                "import/no-unresolved": [
                    "error"
                ],
                "no-restricted-imports": [
                    "error",
                    {
                        "paths": [
                            "@example/example-library",
                            "rxjs/Rx",
                            {
                                "name": "lodash",
                                "message": "Do not import `lodash` directly. Use \"lodash-es\" package instead"
                            },
                            {
                                "name": "lodash-es",
                                "importNames": [
                                    "isEqual"
                                ],
                                "message": "Do not use `isEqual` from `lodash-es`. Use `fast-deep-equal` package instead"
                            }
                        ]
                    }
                ],
                "@typescript-eslint/ban-ts-comment": [
                    "error",
                    {
                        "ts-expect-error": "allow-with-description",
                        "ts-ignore": true,
                        "ts-nocheck": true,
                        "ts-check": false,
                        "minimumDescriptionLength": 3
                    }
                ],
                "unused-imports/no-unused-imports": "error",
                "no-var": "error"
            },
            "settings": {
                "import/extensions": [
                    ".js",
                    ".jsx",
                    ".tsx",
                    ".ts"
                ],
                "import/resolver": {
                    "typescript": {
                        "alwaysTryTypes": true,
                        "project": "./tsconfig.base.json"
                    }
                }
            }
        },
        {
            "files": [
                "*.spec.ts"
            ],
            "rules": {
                "max-nested-callbacks": "off",
                "no-magic-numbers": "off",
                "func-style": "off",
                "id-length": "off",
                "prefer-destructuring": "off"
            }
        },
        {
            "files": [
                "*.module.ts"
            ],
            "extends": [
                "plugin:import/errors",
                "plugin:import/warnings"
            ],
            "rules": {
                "no-multiple-empty-lines": [
                    "error",
                    {
                        "max": 1
                    }
                ],
                "import/order": [
                    "error",
                    {
                        "newlines-between": "always",
                        "groups": [
                            "external",
                            "internal",
                            [
                                "parent",
                                "sibling",
                                "index"
                            ]
                        ],
                        "pathGroups": []
                    }
                ],
                "import/first": "error",
                "import/no-deprecated": "off",
                "import/newline-after-import": "error",
                "import/no-unresolved": "off",
                "deprecation/deprecation": "warn",
                "import/named": "error",
                "unused-imports/no-unused-imports": "error",
                "no-var": "error",
                "@stylistic/ts/comma-dangle": [
                    "error",
                    "always-multiline"
                ]
            }
        },
        {
            "files": [
                "*.html"
            ],
            "extends": [
                "plugin:@angular-eslint/template/recommended",
                "plugin:@angular-eslint/template/accessibility"
            ],
            "rules": {
                "max-lines": [
                    "error",
                    500
                ],
                "@angular-eslint/template/prefer-self-closing-tags": 2,
                "@angular-eslint/template/prefer-ngsrc": 2,
                "@angular-eslint/template/prefer-control-flow": 2
            }
        },
        {
            "files": [
                "*.component.html"
            ],
            "extends": [
                "plugin:@angular-eslint/template/recommended"
            ],
            "rules": {
                "max-len": [
                    "error",
                    {
                        "code": 170,
                        "ignoreUrls": true,
                        "ignorePattern": "d=\"([\\s\\S]*?)\""
                    }
                ],
                "no-multiple-empty-lines": [
                    "error",
                    {
                        "max": 1
                    }
                ]
            }
        },
        {
            "files": [
                "*.js",
                "*.mjs"
            ],
            "extends": [
                "plugin:@typescript-eslint/disable-type-checked"
            ],
            "parserOptions": {
                "ecmaVersion": "latest",
                "sourceType": "module",
                "allowImportExportEverywhere": true,
                "requireConfigFile": false
            },
            "parser": "@babel/eslint-parser",
            "env": {
                "es6": true
            }
        }
    ]
}